<?php

use Organik\ImageResizer\Classes\ImageHandler;
use Organik\ImageResizer\Classes\WordpressHandler;

if (!function_exists('orgnk_image_resize')) {
    /**
     * Resizes a given image in a template
     *
     * The URL of the resized image will be returned.
     *
     * @param string $path
     * @param int $width
     * @param int $height
     * @param array $options
     * @return string
     */
    function orgnk_image_resize($path, $width, $height, ?array $options = null)
    {
        $resizer = new ImageHandler($path, $width, $height, $options ?? []);
        return $resizer->getUrl();
    }
}

if (!function_exists('orgnk_picture')) {
    /**
     * Generates a picture tag with images of the given resizing options from an attachment.
     *
     * Each size should be an array with the following keys:
     *  - `breakpoint`: The breakpoint at which the image should be displayed. A value of `0` will
     *      make that image the "default" image.
     *  - `size`: The size of the image as generated by the resizer.
     *
     * This method echoes directly to the template.
     *
     * @param string $path
     * @param array $breakpoints
     * @param array $attributes Additional attributes to include with the default image
     * @return void
     */
    function orgnk_picture($attachmentId, array $breakpoints, array $attributes = [])
    {
        $metadata = wp_get_attachment_metadata($attachmentId);

        if (empty($metadata)) {
            return;
        }

        $default = null;
        $template = '<picture>%s%s</picture>';
        $images = [];

        krsort($breakpoints, SORT_NUMERIC);

        foreach ($breakpoints as $breakpoint => $sizes) {
            $breakpoint = [
                'breakpoint' => $breakpoint,
            ];
            if (!is_array($sizes)) {
                $sizes = [$sizes];
            }

            foreach ($sizes as $size) {
                if (!isset($metadata['sizes'][$size])) {
                    throw new \Exception('Invalid image size.');
                }

                $image = $metadata['sizes'][$size]['url'];
                $extension = pathinfo($image, PATHINFO_EXTENSION);
                $breakpoint['format'] = $extension;

                if (!in_array($breakpoint['format'], ['jpg', 'jpeg', 'png', 'gif', 'webp'])) {
                    throw new \Exception('Invalid image format.');
                }

                if ($breakpoint['breakpoint'] === 0 && $breakpoint['format'] !== 'webp') {
                    $default = $image;
                }

                $images[] = [
                    'image' => $image,
                    'breakpoint' => $breakpoint,
                ];
            }
        }

        if ($default === null) {
            // Prefer a non-WEBP image as default ...
            foreach ($images as $image) {
                if ($image['breakpoint']['format'] === 'webp') {
                    continue;
                }
                $default = $image['image'];
                break;
            }

            // ... but allow it if there's no other option.
            if ($default === null) {
                $default = $images[0]['image'];
            }
        }

        if (count($images) < 0) {
            // Return an image tag
            echo sprintf('<img src="%s"%s>', $default, implode(' ', array_map(function ($key, $value) {
                return $key . '="' . $value . '"';
            }, array_keys($attributes), array_values($attributes))));
        }

        echo sprintf(
            $template,
            implode('', array_map(function ($image) {
                return sprintf(
                    '<source srcset="%s" media="(min-width: %dpx)" type="image/%s">',
                    $image['image'],
                    $image['breakpoint']['breakpoint'],
                    $image['breakpoint']['format'],
                );
            }, $images)),
            sprintf('<img src="%s"%s>', $default, implode(' ', array_map(function ($key, $value) {
                return $key . '="' . $value . '"';
            }, array_keys($attributes), array_values($attributes))))
        );
    }
}

if (!function_exists('orgnk_get_resized_image')) {

    function orgnk_get_resized_image($attachmentId, $size = null)
    {
        $wpHandler = new WordpressHandler();
        return $wpHandler->getImageUrl($attachmentId, $size);
    }
}
